// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "system/proto";

import "google/protobuf/empty.proto";

package proto;

//////////////////////////////

service StillAlive {
  rpc StillAlive(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

//////////////////////////////

service Orchestrator {
  rpc RegisterAuth(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc RegisterLeaderboard(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc RegisterRacing(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc RegisterGarage(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

//////////////////////////////

service Authentication {
  rpc Login (PlayerCredentials) returns (AuthResult) {}
  rpc Register (PlayerDetails) returns (AuthResult) {}
}

message PlayerCredentials {
  string username = 1;
  string password = 2;
}

message AuthResult {
  bool result = 1;
}

message PlayerDetails {
  string username = 1;
  string password = 2;
  string email = 3;
  string phone = 4;
}

//////////////////////////////

service Racing {
}

//////////////////////////////

service Leaderboard {
  rpc GetLeaderboard(google.protobuf.Empty) returns (stream LeaderboardPosition) {}
  rpc GetPlayer(PlayerUsername) returns (LeaderboardPosition) {}
  rpc AddPoints(PointIncrement) returns (google.protobuf.Empty) {} // used also to create user in leaderboard service database
}

message PointIncrement {
  string username = 1;
  int32 points = 2;
}


message PlayerUsername {
  string username = 1;
}

message LeaderboardPosition {
  string username = 1;
  int32 position = 2;
  int32 points = 3;
}

//////////////////////////////

service Garage {
  rpc GetAllMotorcycles(google.protobuf.Empty) returns (stream MotorcycleInfo) {}
  rpc GetRemainingMotorcycles(PlayerUsername) returns (stream MotorcycleInfo) {}
  rpc GetUserMotorcycles(PlayerUsername) returns (stream OwnershipInfo) {}
  rpc GetUserMoney(PlayerUsername) returns (UserMoney) {}
  rpc IncreaseUserMoney(MoneyIncrease) returns (google.protobuf.Empty) {} // used also to create user in garage service database
  rpc BuyMotorcycle(PlayerMotorcycle) returns (google.protobuf.Empty) {}
  rpc UpgradeMotorcycle(PlayerMotorcycle) returns (google.protobuf.Empty) {}
  rpc StartRace(PlayerMotorcycle) returns (google.protobuf.Empty) {}
  rpc EndRace(PlayerMotorcycle) returns (google.protobuf.Empty) {}
}

message MotorcycleInfo {
  int32 id = 1;
  string name = 2;                 
  int32 price_to_buy = 3;          
  int32 price_to_upgrade = 4;       
  int32 max_level = 5;             
  int32 engine = 6;                
  int32 engine_increment = 7;      
  int32 agility = 8;               
  int32 agility_increment = 9;     
  int32 brakes = 10;               
  int32 brakes_increment = 11;     
  int32 aerodynamics = 12;         
  int32 aerodynamics_increment = 13;
}

message OwnershipInfo {
  string username = 1;
  int32 motorcycle_id = 2;
  int32 level = 3;
  bool is_racing = 4;
  MotorcycleInfo motorcycle_info = 5;
}

message PlayerMotorcycle {
  string username = 1;
  int32 motorcycle_id = 2;
}

message UserMoney {
  int32 money = 1;
}

message MoneyIncrease {
  string username = 1;
  int32 money = 2;
}